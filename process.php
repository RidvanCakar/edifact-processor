 
<?php
require __DIR__ . '/vendor/autoload.php';

use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable(__DIR__);
$dotenv->load();

$log = new Logger('edifact_logger');
$log->pushHandler(new StreamHandler(__DIR__ . '/' . $_ENV['LOG_FILE'], Logger::DEBUG));

// KlasÃ¶rleri oku
$inbox = __DIR__ . '/' . $_ENV['INBOX_DIR'];
$archive = __DIR__ . '/' . $_ENV['ARCHIVE_DIR'];
$outbox = __DIR__ . '/' . $_ENV['OUTBOX_DIR'];
$error = __DIR__ . '/' . $_ENV['ERROR_DIR'];

$files = glob($inbox . '/*.txt'); 

foreach ($files as $file) {
    try {
        $filename = basename($file);
        $log->info("Dosya iÅŸleniyor: $filename");

        // Orijinal dosyayÄ± archive'a kopyala
        copy($file, $archive . '/' . $filename);
        $log->info("Dosya archive klasÃ¶rÃ¼ne kopyalandÄ±: $filename");

        // Dosya iÃ§eriÄŸini oku
        $content = file_get_contents($file);

        // ğŸš§ Burada EDIFACT dÃ¶nÃ¼ÅŸÃ¼mÃ¼nÃ¼ yapacaksÄ±n
        $updatedContent = transformEdifact($content); // Bu fonksiyonu sen tanÄ±mlayacaksÄ±n

        // DÃ¶nÃ¼ÅŸtÃ¼rÃ¼lmÃ¼ÅŸ dosyayÄ± outbox'a kaydet
        file_put_contents($outbox . '/' . $filename, $updatedContent);
        $log->info("Dosya outbox klasÃ¶rÃ¼ne yazÄ±ldÄ±: $filename");

        // Son olarak inbox'tan sil
        unlink($file);
    } catch (Exception $e) {
        $log->error("Dosya iÅŸlenirken hata oluÅŸtu ($filename): " . $e->getMessage());

        // HatalÄ± dosyayÄ± error klasÃ¶rÃ¼ne taÅŸÄ±
        rename($file, $error . '/' . $filename);
    }
}

//  Ã–rnek dÃ¶nÃ¼ÅŸÃ¼m fonksiyonu
function transformEdifact($content) {
    // MÃ¼ÅŸteri istediÄŸi biÃ§ime gÃ¶re string deÄŸiÅŸiklikleri yapÄ±labilir.
    // Ã–rnek olarak: bazÄ± segmentleri deÄŸiÅŸtir
    $content = str_replace('OLDVALUE', 'NEWVALUE', $content);

    return $content;
}
